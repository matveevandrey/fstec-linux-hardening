#!/bin/bash
# fstec-linux-hardening.sh
# –ü–æ–ª–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ—Ç–æ–¥–∏—á–∫–µ –§–°–¢–≠–ö –æ—Ç 25.12.2022

set -euo pipefail
IFS=$'\n\t'

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
MODE="test"
VERBOSE=0
LOG_FILE="/var/log/fstec-hardening-$(date +%Y%m%d-%H%M%S).log"
BACKUP_DIR="/root/fstec-backup-$(date +%Y%m%d)"
RISK_LEVEL="all"  # all, low, medium, high, custom

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ —Å —Ä–∏—Å–∫–∞–º–∏
declare -A RISK_DATABASE=(
    # 2.1 –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    ["2.1.1"]="low"      # –ó–∞–ø—Ä–µ—Ç –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–æ–ª–µ–π
    ["2.1.2"]="medium"   # –ó–∞–ø—Ä–µ—Ç root –ø–æ SSH
    
    # 2.2 –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏  
    ["2.2.1"]="low"      # su —Ç–æ–ª—å–∫–æ –¥–ª—è wheel
    ["2.2.2"]="medium"   # sudo —Ç–æ–ª—å–∫–æ –¥–ª—è wheel/sudo
    
    # 2.3 –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    ["2.3.1"]="low"      # –ü—Ä–∞–≤–∞ –Ω–∞ passwd/group/shadow
    ["2.3.2"]="low"      # –ó–∞—â–∏—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    ["2.3.3"]="low"      # Cron –ø—Ä–∞–≤–∞
    ["2.3.4"]="low"      # Cron –ø—Ä–∞–≤–∞
    ["2.3.5"]="low"      # rc.d –ø—Ä–∞–≤–∞
    ["2.3.6"]="medium"   # Cron user
    ["2.3.7"]="medium"   # at –ø—Ä–∞–≤–∞
    ["2.3.8"]="low"      # –ü—Ä–∞–≤–∞ –Ω–∞ bin/sbin/lib
    ["2.3.9"]="high"     # SUID/SGID
    ["2.3.10"]="low"     # –î–æ–º–∞—à–Ω–∏–µ —Ñ–∞–π–ª—ã
    ["2.3.11"]="low"     # –î–æ–º–∞—à–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∏
    
    # 2.4 –£—Å–∏–ª–µ–Ω–∏–µ —è–¥—Ä–∞
    ["2.4.1"]="medium"   # kernel.dmesg_restrict=1
    ["2.4.2"]="low"      # kernel.kptr_restrict=2
    ["2.4.3"]="medium"   # init_on_alloc=1
    ["2.4.4"]="medium"   # slab_nomerge
    ["2.4.5"]="high"     # iommu=force
    ["2.4.6"]="low"      # randomize_kstack_offset=1
    ["2.4.7"]="high"     # mitigations=auto,nosmt
    ["2.4.8"]="medium"   # net.core.bpf_jit_harden=2
    
    # 2.5 –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ–¥—Å–∏—Å—Ç–µ–º —è–¥—Ä–∞
    ["2.5.1"]="high"     # vsyscall=none
    ["2.5.2"]="medium"   # perf_event_paranoid=3
    ["2.5.3"]="medium"   # debugfs=off
    ["2.5.4"]="medium"   # kexec_load_disabled=1
    ["2.5.5"]="high"     # user.max_user_namespaces=0
    ["2.5.6"]="medium"   # unprivileged_bpf_disabled=1
    ["2.5.7"]="low"      # unprivileged_userfaultfd=0
    ["2.5.8"]="low"      # dev.tty.ldisc_autoload=0
    ["2.5.9"]="medium"   # tsx=off
    ["2.5.10"]="high"    # vm.mmap_min_addr=65536
    ["2.5.11"]="low"     # randomize_va_space=2
    
    # 2.6 –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
    ["2.6.1"]="high"     # ptrace_scope=3
    ["2.6.2"]="low"      # protected_symlinks=1
    ["2.6.3"]="low"      # protected_hardlinks=1
    ["2.6.4"]="low"      # protected_fifos=2
    ["2.6.5"]="low"      # protected_regular=2
    ["2.6.6"]="low"      # suid_dumpable=0
)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
if grep -q '^%sudo' /etc/sudoers; then
    ADMIN_GROUP="sudo"
elif grep -q '^%wheel' /etc/sudoers; then
    ADMIN_GROUP="wheel"
else
    ADMIN_GROUP="wheel"
    if ! grep -q '^wheel:' /etc/group; then
        echo "wheel:x:10:root" >> /etc/group
    fi
fi

# –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Å–µ–∫—Ü–∏–∏
SECTIONS=("2.1" "2.2" "2.3" "2.4" "2.5" "2.6" "kernel")

# –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö/–≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
TOTAL_CHECKS=0
SUCCESS_CHECKS=0
ERROR_CHECKS=0

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Å—Ç—Ä–∏–±—É—Ç–∏–≤–∞
OS_TYPE="unknown"
if [[ -f /etc/os-release ]]; then
    . /etc/os-release
    OS_ID="${ID:-unknown}"
    OS_VERSION="${VERSION_ID:-unknown}"
    
    if [[ "$OS_ID" == "alt" ]] || grep -qi "alt" /etc/os-release; then
        OS_TYPE="alt"
    elif [[ "$OS_ID" == "debian" || "$OS_ID" == "ubuntu" ]]; then
        OS_TYPE="debian"
    elif [[ "$OS_ID" == "centos" || "$OS_ID" == "rhel" ]]; then
        OS_TYPE="rhel"
    fi
fi

# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() { echo -e "${BLUE}[INFO]${NC} $1" | tee -a "$LOG_FILE"; }
success() { echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$LOG_FILE"; }
warning() { echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"; }
error() { echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"; }

# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ä–∏—Å–∫–∞
print_risk() {
    local risk="$1"
    local desc="$2"
    
    case "$risk" in
        "low") echo -e "${GREEN}[‚ö™ –ù–ò–ó–ö–ò–ô]${NC} $desc" ;;
        "medium") echo -e "${YELLOW}[üü° –°–†–ï–î–ù–ò–ô]${NC} $desc" ;;
        "high") echo -e "${RED}[üî¥ –í–´–°–û–ö–ò–ô]${NC} $desc" ;;
        *) echo -e "[?] $desc" ;;
    esac
}

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏/–ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
apply_or_test() {
    local check_cmd="$1"
    local apply_cmd="$2"
    local desc="$3"
    local risk_key="$4"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    local risk="${RISK_DATABASE[$risk_key]:-unknown}"
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é —Ä–∏—Å–∫–∞
    if [[ "$RISK_LEVEL" != "all" ]] && [[ "$RISK_LEVEL" != "$risk" ]] && [[ "$RISK_LEVEL" != "custom" ]]; then
        return 0
    fi

    TOTAL_CHECKS=$((TOTAL_CHECKS+1))

    if [[ "$MODE" == "test" ]]; then
        if eval "$check_cmd" >/dev/null 2>&1; then
            print_risk "$risk" "$desc ‚úì"
            SUCCESS_CHECKS=$((SUCCESS_CHECKS+1))
            return 0
        else
            print_risk "$risk" "$desc ‚úó"
            return 1
        fi
    else
        log "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: $desc"
        if eval "$apply_cmd" >>"$LOG_FILE" 2>&1; then
            success "–ü—Ä–∏–º–µ–Ω–µ–Ω–æ: $desc"
            return 0
        else
            error "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è: $desc"
            ERROR_CHECKS=$((ERROR_CHECKS+1))
            return 1
        fi
    fi
}

########## 2.1. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ##########
section_2_1() {
    log "=== –°–µ–∫—Ü–∏—è 2.1: –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ==="
    apply_or_test \
        "! awk -F: '\$2 == \"\" {print \$1}' /etc/shadow | grep -q ." \
        "sed -i 's/nullok//g' /etc/pam.d/* && passwd -l \$(awk -F: '\$2 == \"\" {print \$1}' /etc/shadow) 2>/dev/null || true" \
        "2.1.1. –ó–∞–ø—Ä–µ—Ç –ø—É—Å—Ç—ã—Ö –ø–∞—Ä–æ–ª–µ–π" \
        "2.1.1"
    
    apply_or_test \
        "grep -q '^PermitRootLogin no' /etc/ssh/sshd_config" \
        "sed -i 's/^#*PermitRootLogin.*/PermitRootLogin no/' /etc/ssh/sshd_config && systemctl restart sshd 2>/dev/null || true" \
        "2.1.2. –ó–∞–ø—Ä–µ—Ç root –≤—Ö–æ–¥–∞ –ø–æ SSH" \
        "2.1.2"
}

########## 2.2. –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ ##########
section_2_2() {
    log "=== –°–µ–∫—Ü–∏—è 2.2: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π ==="
    
    apply_or_test \
        "grep -q 'auth required pam_wheel.so' /etc/pam.d/su" \
        "echo 'auth required pam_wheel.so use_uid' >> /etc/pam.d/su" \
        "2.2.1. –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã su –≥—Ä—É–ø–ø–æ–π $ADMIN_GROUP" \
        "2.2.1"
    
    apply_or_test \
        "grep -q '^%${ADMIN_GROUP}' /etc/sudoers" \
        "echo '%${ADMIN_GROUP} ALL=(ALL:ALL) ALL' >> /etc/sudoers" \
        "2.2.2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ sudo –¥–ª—è –≥—Ä—É–ø–ø—ã $ADMIN_GROUP" \
        "2.2.2"
}

########## 2.3. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ ##########
section_2_3() {
    log "=== –°–µ–∫—Ü–∏—è 2.3: –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –§–° ==="
    
    apply_or_test \
        "[[ \$(stat -c '%a' /etc/passwd 2>/dev/null) == 644 ]] && [[ \$(stat -c '%a' /etc/group 2>/dev/null) == 644 ]] && [[ \$(stat -c '%a' /etc/shadow 2>/dev/null) =~ ^(0|640)$ ]]" \
        "chmod 644 /etc/passwd /etc/group 2>/dev/null || true; chmod 640 /etc/shadow 2>/dev/null || true; chown root:root /etc/passwd /etc/group /etc/shadow 2>/dev/null || true" \
        "2.3.1. –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ /etc/passwd, /etc/group, /etc/shadow" \
        "2.3.1"
    
    apply_or_test \
        "! find /etc/cron* /var/spool/cron -type f -executable ! -user root 2>/dev/null | head -5 | grep -q ." \
        "find /etc/cron* /var/spool/cron -type f -executable ! -user root -exec chmod go-w {} \\; 2>/dev/null || true" \
        "2.3.3. –ü—Ä–∞–≤–∞ –Ω–∞ —Ñ–∞–π–ª—ã cron" \
        "2.3.3"
    
    apply_or_test \
        "find / -xdev -type f -perm /6000 2>/dev/null | head -10 | xargs -I {} sh -c 'stat -c \"%a %U\" {} 2>/dev/null' | awk '\$1 ~ /[0-9][0-9][0-9][0-9]/ && \$2 != \"root\" {exit 1}' || true" \
        "find / -xdev -type f -perm /6000 ! -user root -exec chmod go-w {} \\; 2>/dev/null || true" \
        "2.3.9. –ê—É–¥–∏—Ç SUID/SGID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π" \
        "2.3.9"
}

########## 2.4. –ó–∞—â–∏—Ç–∞ —è–¥—Ä–∞ ##########
section_2_4() {
    log "=== –°–µ–∫—Ü–∏—è 2.4: –£—Å–∏–ª–µ–Ω–∏–µ —è–¥—Ä–∞ ==="
    local sysctl_file="/etc/sysctl.d/99-fstec-security.conf"
    
    [[ "$MODE" == "apply" ]] && echo "# FSTEC Security Settings" > "$sysctl_file"
    
    apply_or_test "[[ \$(sysctl -n kernel.dmesg_restrict 2>/dev/null) == 1 ]]" \
        "echo 'kernel.dmesg_restrict = 1' >> '$sysctl_file'" \
        "2.4.1. kernel.dmesg_restrict = 1" \
        "2.4.1"
    
    apply_or_test "[[ \$(sysctl -n kernel.kptr_restrict 2>/dev/null) == 2 ]]" \
        "echo 'kernel.kptr_restrict = 2' >> '$sysctl_file'" \
        "2.4.2. kernel.kptr_restrict = 2" \
        "2.4.2"
}

########## 2.5. –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –∞—Ç–∞–∫–∏ ##########
section_2_5() {
    log "=== –°–µ–∫—Ü–∏—è 2.5: –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –∞—Ç–∞–∫–∏ —è–¥—Ä–∞ ==="
    local sysctl_file="/etc/sysctl.d/99-fstec-security.conf"
    
    apply_or_test "[[ \$(sysctl -n kernel.perf_event_paranoid 2>/dev/null) == 3 ]]" \
        "echo 'kernel.perf_event_paranoid = 3' >> '$sysctl_file'" \
        "2.5.2. kernel.perf_event_paranoid = 3" \
        "2.5.2"
}

########## 2.6. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ##########
section_2_6() {
    log "=== –°–µ–∫—Ü–∏—è 2.6: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ==="
    local sysctl_file="/etc/sysctl.d/99-fstec-security.conf"
    
    apply_or_test "[[ \$(sysctl -n kernel.yama.ptrace_scope 2>/dev/null) == 3 ]]" \
        "echo 'kernel.yama.ptrace_scope = 3' >> '$sysctl_file'" \
        "2.6.1. kernel.yama.ptrace_scope = 3" \
        "2.6.1"
}

########## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ —è–¥—Ä–∞ ##########
configure_kernel_params() {
    log "=== –°–µ–∫—Ü–∏—è kernel: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏ —è–¥—Ä–∞ ==="
    
    local grub_file="/etc/default/grub"
    [[ -f "$grub_file" ]] || return
    
    apply_or_test "grep -q 'init_on_alloc=1' /proc/cmdline" \
        "sed -i 's/GRUB_CMDLINE_LINUX=\"\\(.*\\)\"/GRUB_CMDLINE_LINUX=\"\\1 init_on_alloc=1\"/' '$grub_file'" \
        "2.4.3. init_on_alloc=1" \
        "2.4.3"
}

########## –ó–∞–ø—É—Å–∫ —Å–µ–∫—Ü–∏–π ##########
run_sections() {
    for sec in "${SECTIONS[@]}"; do
        case "$sec" in
            "2.1") section_2_1 ;;
            "2.2") section_2_2 ;;
            "2.3") section_2_3 ;;
            "2.4") section_2_4 ;;
            "2.5") section_2_5 ;;
            "2.6") section_2_6 ;;
            "kernel") configure_kernel_params ;;
        esac
    done
}

########## –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∏—Å–∫–æ–≤ ##########
show_risk_stats() {
    local low=0 medium=0 high=0
    
    for risk in "${RISK_DATABASE[@]}"; do
        case "$risk" in
            "low") ((low++)) ;;
            "medium") ((medium++)) ;;
            "high") ((high++)) ;;
        esac
    done
    
    echo -e "\n${CYAN}=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ò–°–ö–û–í ===${NC}"
    echo -e "${GREEN}‚ö™ –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: $low –ø—É–Ω–∫—Ç–æ–≤${NC}"
    echo -e "${YELLOW}üü° –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: $medium –ø—É–Ω–∫—Ç–æ–≤${NC}"
    echo -e "${RED}üî¥ –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: $high –ø—É–Ω–∫—Ç–æ–≤${NC}"
    echo -e "${BLUE}–í—Å–µ–≥–æ: $((low + medium + high)) –ø—É–Ω–∫—Ç–æ–≤${NC}"
}

########## –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ##########
main() {
    [[ "$MODE" == "apply" && $EUID -ne 0 ]] && { error "–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ root"; exit 1; }

    echo -e "${MAGENTA}=== FSTEC LINUX HARDENING ===${NC}"
    echo -e "–†–µ–∂–∏–º: ${MODE}"
    echo -e "–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: ${RISK_LEVEL}"
    echo -e "–û–°: ${OS_TYPE} ${OS_ID} ${OS_VERSION}"
    echo -e "–ì—Ä—É–ø–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${ADMIN_GROUP}"
    echo -e "–õ–æ–≥: ${LOG_FILE}"
    
    show_risk_stats
    
    [[ "$MODE" == "apply" ]] && create_backup
    run_sections

    if [[ "$MODE" == "test" ]]; then
        local total=$((TOTAL_CHECKS > 0 ? TOTAL_CHECKS : 1))
        local percent=$((SUCCESS_CHECKS * 100 / total))
        
        echo -e "\n${CYAN}=== –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò ===${NC}"
        echo -e "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç: ${GREEN}${SUCCESS_CHECKS}/${TOTAL_CHECKS}${NC} (${percent}%)"
        
        if [[ $percent -ge 80 ]]; then
            echo -e "–û–±—â–∏–π —Ä–∏—Å–∫: ${GREEN}‚ö™ –ù–ò–ó–ö–ò–ô${NC}"
        elif [[ $percent -ge 50 ]]; then
            echo -e "–û–±—â–∏–π —Ä–∏—Å–∫: ${YELLOW}üü° –°–†–ï–î–ù–ò–ô${NC}"
        else
            echo -e "–û–±—â–∏–π —Ä–∏—Å–∫: ${RED}üî¥ –í–´–°–û–ö–ò–ô${NC}"
        fi
    else
        success "–ó–∞–≤–µ—Ä—à–µ–Ω–æ! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É."
    fi
}

########## –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ##########
parse_arguments() {
    for arg in "$@"; do
        case "$arg" in
            "--test"|"-t") MODE="test" ;;
            "--apply"|"-a") MODE="apply" ;;
            "--verbose"|"-v") VERBOSE=1 ;;
            "--risk-low"|"-rl") RISK_LEVEL="low" ;;
            "--risk-medium"|"-rm") RISK_LEVEL="medium" ;;
            "--risk-high"|"-rh") RISK_LEVEL="high" ;;
            "--risk-all"|"-ra") RISK_LEVEL="all" ;;
            "--risk-custom"|"-rc") RISK_LEVEL="custom" ;;
            "--help"|"-h")
                echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [OPTIONS]"
                echo "  --test, -t        - —Ä–µ–∂–∏–º –ø—Ä–æ–≤–µ—Ä–∫–∏"
                echo "  --apply, -a       - —Ä–µ–∂–∏–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è"
                echo "  --risk-low, -rl   - —Ç–æ–ª—å–∫–æ –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫"
                echo "  --risk-medium, -rm - —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫" 
                echo "  --risk-high, -rh  - —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
                echo "  --risk-all, -ra   - –≤—Å–µ —Ä–∏—Å–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
                echo "  --risk-custom, -rc- –≤—ã–±–æ—Ä–æ—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
                echo "  --verbose, -v     - –ø–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
                echo "  --help, -h        - —Å–ø—Ä–∞–≤–∫–∞"
                exit 0
                ;;
        esac
    done
}

parse_arguments "$@"
main
